
import * as S from './style/RegisterChildrenModalPage.style';
import { useState, useEffect } from 'react';

const RegisterChildrenModalPage = ({ setModalOpen, setClassInfo, classInfo, formData, setFormData }) => {

    const [children, setChildren] = useState([]);
    
    useEffect(() => {
        const savedData = localStorage.getItem('classInfo');
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            setFormData({
                ...formData,
                kindergarten: parsedData.ÏõêÎ™Ö || '',
                className: parsedData.ÍµêÏã§Î™Ö || '',
                age: parsedData.Ïó∞Î†π || '',
                teacher: parsedData.ÍµêÏÇ¨Î™Ö || '',
                child: '',
                children: parsedData.Ïö∞Î¶¨Î∞òÎ™ÖÎã® || [],
                observe:[]
            });
            setChildren(parsedData.Ïö∞Î¶¨Î∞òÎ™ÖÎã® || []);
        }
    }, [formData, setFormData]);
    useEffect(() => {
        localStorage.setItem('formData', JSON.stringify(formData));
    }, [formData]);


    const handleChange = (e) => {
        e.preventDefault();

        const { name, value } = e.target;
        setFormData({
            ...formData,
            [name]: value,
        });
    };

    const handleAddChild = (e) => {
        e.preventDefault();
        if (formData.child) {
            setClassInfo(prevClassInfo => ({
                ...prevClassInfo,
                Ïö∞Î¶¨Î∞òÎ™ÖÎã®: [...prevClassInfo.Ïö∞Î¶¨Î∞òÎ™ÖÎã®, formData.child].sort((a, b) => a.localeCompare(b)),
            }));
    
            const updatedChildren = [...formData.children, formData.child].sort((a, b) => a.localeCompare(b));
            setFormData({
                ...formData,
                children: updatedChildren,
                child: '',
            });
    
            // children ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            setChildren(updatedChildren);
        }
    };

    const offRegisterModal = () => {
        setModalOpen(false);
    };

    const updateDisplayedInfo = (field, value) => {
        setClassInfo({
            ...classInfo,
            [field]: value,
        });
    };

    const pushField = (field, value, e) => {
        e.preventDefault();
        updateDisplayedInfo(field, value);
    };

    const handleDeleteChild = (child) => {
        // 'Ïö∞Î¶¨Î∞òÎ™ÖÎã®'ÏóêÏÑú ÏÑ†ÌÉùÌïú ÏïÑÏù¥ÌÖú Ï†úÍ±∞
        const updatedClassInfo = {
            ...classInfo,
            Ïö∞Î¶¨Î∞òÎ™ÖÎã®: (classInfo.Ïö∞Î¶¨Î∞òÎ™ÖÎã® || []).filter((c) => c !== child),
        };
    
        // classInfo ÏóÖÎç∞Ïù¥Ìä∏
        setClassInfo({...updatedClassInfo});
    
        // formData ÏóÖÎç∞Ïù¥Ìä∏
        const updatedChildren = formData.children.filter((c) => c !== child);
        setFormData({
            ...formData,
            children: updatedChildren.sort((a, b) => a.localeCompare(b)),
        });
    
        // children ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setChildren(updatedChildren);
    };

    const saveRegisterModal = (e) => {
        e.preventDefault();
        setClassInfo({
            ÏõêÎ™Ö: formData.kindergarten,
            ÍµêÏã§Î™Ö: formData.className,
            ÍµêÏÇ¨Î™Ö: formData.teacher,
            Ïó∞Î†π: formData.age,
            Ïú†ÏïÑÎì±Î°ù: '',
            Ïö∞Î¶¨Î∞òÎ™ÖÎã®: formData.children,
        });
        localStorage.setItem('classInfo', JSON.stringify(classInfo));
        console.log(classInfo);
        setModalOpen(false);
    };
    return (
        <S.RegisterChildrenModalPage onSubmit={saveRegisterModal}>
            <S.ModalHead>
                <S.ModalTitle>üê•Ïö∞Î¶¨ Î∞ò ÌïôÍ∏â ÏÑ§Ï†ïüê•</S.ModalTitle>
            </S.ModalHead>
            <S.RegisterInfo1>
                <S.Register>
                    <S.RegisterTitle>Ïö∞Î¶¨Î∞ò ÏÑ§Ï†ï</S.RegisterTitle>
                    <S.RegisterTable>
                        <S.TableLine>
                            <S.TableLineBox>ÏõêÎ™Ö</S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineInput
                                    type="text"
                                    name="kindergarten"
                                    value={formData.kindergarten}
                                    onChange={handleChange}
                                    placeholder="OOÏú†ÏπòÏõê"
                                />
                            </S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineButton onClick={(e) => pushField('ÏõêÎ™Ö', formData.kindergarten, e)}>
                                    <span className="material-symbols-outlined" style={{ fontSize: '15px', fontWeight: 700 }}>done</span>
                                </S.TableLineButton>
                            </S.TableLineBox>
                        </S.TableLine>
                        <S.TableLine>
                            <S.TableLineBox>ÍµêÏã§Î™Ö</S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineInput
                                    type="text"
                                    name="className"
                                    value={formData.className}
                                    onChange={handleChange}
                                    placeholder="OOÎ∞ò"
                                />
                            </S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineButton onClick={(e) => pushField('ÍµêÏã§Î™Ö', formData.className, e)}>
                                    <span className="material-symbols-outlined" style={{ fontSize: '15px', fontWeight: 700 }}>done</span>
                                </S.TableLineButton>
                            </S.TableLineBox>
                        </S.TableLine>
                        <S.TableLine>
                            <S.TableLineBox>ÍµêÏÇ¨Î™Ö</S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineInput
                                    type="text"
                                    name="teacher"
                                    value={formData.teacher}
                                    onChange={handleChange}
                                    placeholder="ÍπÄÎØ∏ÎØ∏"
                                />
                            </S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineButton onClick={(e) => pushField('ÍµêÏÇ¨Î™Ö', formData.teacher, e)}>
                                    <span className="material-symbols-outlined" style={{ fontSize: '15px', fontWeight: 700 }}>done</span>
                                </S.TableLineButton>
                            </S.TableLineBox>
                        </S.TableLine>
                        <S.TableLine>
                            <S.TableLineBox>Ïó∞Î†π(Îßå)</S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineInput
                                    type="number"
                                    name="age"
                                    value={formData.age}
                                    onChange={handleChange}
                                    placeholder="5"
                                />
                            </S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineButton onClick={(e) => pushField('Ïó∞Î†π', formData.age, e)}>
                                    <span className="material-symbols-outlined" style={{ fontSize: '15px', fontWeight: 700 }}>done</span>
                                </S.TableLineButton>
                            </S.TableLineBox>
                        </S.TableLine>
                        <S.TableLine>
                            <S.TableLineBox>Ïú†ÏïÑÎì±Î°ù</S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineInput
                                    type="text"
                                    name="child"
                                    value={formData.child}
                                    onChange={handleChange}
                                    placeholder="ÍπÄÎùºÎùº"
                                />
                            </S.TableLineBox>
                            <S.TableLineBox>
                                <S.TableLineButton onClick={handleAddChild}>
                                    <span className="material-symbols-outlined" style={{ fontSize: '15px', fontWeight: 700 }}>add</span>
                                </S.TableLineButton>
                            </S.TableLineBox>
                        </S.TableLine>
                    </S.RegisterTable>
                </S.Register>
                <S.Confirm>
                    <S.ConfirmTitle>Ïö∞Î¶¨Î∞ò Ï†ïÎ≥¥ ÌôïÏù∏</S.ConfirmTitle>
                    <S.ConfirmTable>
                        <S.ConfirmTableHead></S.ConfirmTableHead>
                        <S.ConfirmTableBody>
                            {Object.keys(classInfo).slice(0, 4).map((field, index) => (
                                <S.TableLine2 key={index}>
                                    <S.TableLineInfoBox1>{field}:</S.TableLineInfoBox1>
                                    <S.TableLineInfoBox2>
                                        <S.TableLineInfo>{classInfo[field]}</S.TableLineInfo>
                                    </S.TableLineInfoBox2>
                                </S.TableLine2>
                            ))}
                        </S.ConfirmTableBody>
                    </S.ConfirmTable>
                </S.Confirm>
            </S.RegisterInfo1>
            <S.RegisterInfo2>
                <S.ConfirmTitle>Ïö∞Î¶¨Î∞ò Î™ÖÎã®</S.ConfirmTitle>
                <S.Table>
                    <S.Children>
                        {children.map((child, index) => (
                            <S.ChildBox key={index}>
                                <S.Child>{child}</S.Child>
                                <S.ChildDeleteWrapper>
                                    <S.ChildDelete onClick={(child) => handleDeleteChild(child)}>X</S.ChildDelete>
                                </S.ChildDeleteWrapper>
                            </S.ChildBox>
                        ))}
                    </S.Children>
                </S.Table>
            </S.RegisterInfo2>
            <S.ButtonDiv>
                    <S.ModalSave type="submit">Ï†ÄÏû•</S.ModalSave>
                    <S.ModalOff onClick={offRegisterModal}>Îã´Í∏∞</S.ModalOff>
            </S.ButtonDiv>
        </S.RegisterChildrenModalPage>
    );
}
export default RegisterChildrenModalPage;